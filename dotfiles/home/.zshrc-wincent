# shellcheck disable=SC2148

# Make completion:
# - Case-insensitive.
# - Accept abbreviations after . or _ or - (ie. f.b -> foo.bar).
# - Substring complete (ie. bar -> foobar).
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Colorize completions using default `ls` colors.
zstyle ':completion:*' list-colors ''

# Loaded by zplug
autoload -U colors
colors

function +vi-hg-bookmarks() {
  emulate -L zsh
  if [[ -n "${hook_com[hg-active-bookmark]}" ]]; then
    hook_com[hg-bookmark-string]="${(Mj:,:)@}"
    ret=1
  fi
}

function +vi-hg-message() {
  emulate -L zsh

  # Suppress hg branch display if we can display a bookmark instead.
  if [[ -n "${hook_com[misc]}" ]]; then
    hook_com[branch]=''
  fi
  return 0
}

function +vi-git-untracked() {
  emulate -L zsh
  if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
    hook_com[unstaged]+="%F{blue}●%f"
  fi
}

setopt PROMPT_SUBST

#
# History
#

export HISTSIZE=100000
export HISTFILE="$HOME/.zsh_history"
export SAVEHIST=$HISTSIZE

#
# Options
#

setopt autocd               # .. is shortcut for cd .. (etc)
setopt autoparamslash       # tab completing directory appends a slash
setopt autopushd            # cd automatically pushes old dir onto dir stack
setopt clobber              # allow clobbering with >, no need to use >!
setopt noflowcontrol        # disable start (C-s) and stop (C-q) characters
setopt nonomatch            # unmatched patterns are left unchanged
setopt histignorealldups    # filter duplicates from history
setopt histignorespace      # don't record commands starting with a space
setopt histverify           # confirm history expansion (!$, !!, !foo)
setopt ignoreeof            # prevent accidental C-d from exiting shell
setopt interactivecomments  # allow comments, even in interactive shells
# setopt printexitvalue       # for non-zero exit status
setopt pushdignoredups      # don't push multiple copies of same dir onto stack
setopt pushdsilent          # don't print dir stack after pushing/popping
setopt sharehistory         # share history across shells

# Tab Auto-completion
unsetopt menu_complete
setopt auto_menu
setopt complete_in_word
setopt always_to_end

#
# Bindings
#

bindkey -e # emacs bindings, set to -v for vi bindings

autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "\e[A" history-beginning-search-backward-end  # cursor up
bindkey "\e[B" history-beginning-search-forward-end   # cursor down

autoload -U select-word-style
select-word-style bash # only alphanumeric chars are considered WORDCHARS

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line

bindkey ' ' magic-space # do history expansion on space

# Replace standard history-incremental-search-{backward,forward} bindings.
# These are the same but permit patterns (eg. a*b) to be used.
bindkey "^r" history-incremental-pattern-search-backward
bindkey "^s" history-incremental-pattern-search-forward

# Make CTRL-Z background things and unbackground them.
function fg-bg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}
zle -N fg-bg
bindkey '^Z' fg-bg

#
# Other
#

zsh_optional_files=(
    ~/.zsh/aliases
    ~/.zsh/common
    ~/.zsh/colors
    ~/.zsh/exports
    ~/.zsh/functions
    ~/.zsh/path
    ~/.zsh/vars
    ~/.zsh/common.private
    ~/.zsh/functions.private
)

for f in ${optional_files[*]}; do
    test -f "$f" && source "$f"
done


#
# Hooks
#

autoload -U add-zsh-hook

function set-tab-and-window-title() {
  emulate -L zsh
  local CMD="${1:gs/$/\\$}"
  print -Pn "\e]0;$CMD:q\a"
}

function update-window-title-precmd() {
  emulate -L zsh
  set-tab-and-window-title "$(basename "$PWD")"
}
add-zsh-hook precmd update-window-title-precmd

typeset -F SECONDS
function record-start-time() {
  emulate -L zsh
  ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
}
add-zsh-hook preexec record-start-time

function report-start-time() {
  emulate -L zsh
  if [ $ZSH_START_TIME ]; then
    local DELTA=$(($SECONDS - $ZSH_START_TIME))
    local DAYS=$((~~($DELTA / 86400)))
    local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
    local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
    local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
    local ELAPSED=''
    test "$DAYS" != '0' && ELAPSED="${DAYS}d"
    test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
    test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
    if [ "$ELAPSED" = '' ]; then
      SECS="$(print -f "%.2f" $SECS)s"
    elif [ "$DAYS" != '0' ]; then
      SECS=''
    else
      SECS="$((~~$SECS))s"
    fi
    ELAPSED="${ELAPSED}${SECS}"
    set_prompt_with_elapsed_time "$ELAPSED"
  fi
  unset ZSH_START_TIME
}
add-zsh-hook precmd report-start-time

function auto-ls-after-cd() {
  emulate -L zsh
  # Only in response to a user-initiated `cd`, not indirectly (eg. via another
  # function).
  if [ "$ZSH_EVAL_CONTEXT" = "toplevel:shfunc" ]; then
    if [[ "$OSTYPE" = darwin* ]] ; then
      ls -Ga
    else
      ls -a
    fi
  fi
}
add-zsh-hook chpwd auto-ls-after-cd

# adds `cdr` command for navigating to recent directories
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# enable menu-style completion for cdr
zstyle ':completion:*:*:*:*:*' menu selection

# fall through to cd if cdr is passed a non-recent dir as an argument
zstyle ':chpwd:*' recent-dirs-default true

#
# Prompt
#

# http://zsh.sourceforge.net/Doc/Release/User-Contributions.html
autoload -Uz vcs_info
# Check the repository for changes so they can be used in %u/%c (see
# below). This comes with a speed penalty for bigger repositories.
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' use-simple true
zstyle ':vcs_info:*' stagedstr "%F{green}●%f" # default 'S'
zstyle ':vcs_info:*' unstagedstr "%F{red}●%f" # default 'U'
# Format
zstyle ':vcs_info:*' formats '[ %F{cyan}%b%f %m%c%u]' # default ' (%s)-[%b]%c%u-'
zstyle ':vcs_info:*' actionformats '[ %F{cyan}%b%f %a%m%c%u]' # default ' (%s)-[%b|%a]%c%u-'

# Default to running vcs_info. If possible we prevent running it later for
# speed reasons. If set to a non empty value vcs_info is run.
FORCE_RUN_VCS_INFO=1
# Only run vcs_info when necessary to speed up the prompt and make using
# check-for-changes bearable in bigger repositories. This setup was
# inspired by Bart Trojanowski
# (http://jukie.net/~bart/blog/pimping-out-zsh-prompt).
#
# This setup is by no means perfect. It can only detect changes done
# through the VCS's commands run by the current shell. If you use your
# editor to commit changes to the VCS or if you run them in another shell
# this setup won't detect them. To fix this just run "cd ." which causes
# vcs_info to run and update the information. If you use aliases to run
# the VCS commands update the case check below.
zstyle ':vcs_info:*+pre-get-data:*' hooks pre-get-data
+vi-pre-get-data() {
    # Only Git and Mercurial support and need caching. Abort if any other
    # VCS is used.
    [[ "$vcs" != git && "$vcs" != hg ]] && return

    # If the shell just started up or we changed directories (or for other
    # custom reasons) we must run vcs_info.
    if [[ -n $FORCE_RUN_VCS_INFO ]]; then
        FORCE_RUN_VCS_INFO=
        return
    fi

    # If we got to this point, running vcs_info was not forced, so now we
    # default to not running it and selectively choose when we want to run
    # it (ret=0 means run it, ret=1 means don't).
    ret=0

    # Skip big repos
    case "$PWD" in
        *app-catalogue*)
            ret=1
            ;;
    esac

    # If a git/hg command was run then run vcs_info as the status might
    # need to be updated.
    #
    # Aliases: gst, gb, gco
    case "$(fc -ln $(($HISTCMD-1)))" in
        git* | gb* | gst | gco*)
            ret=0
            ;;
        hg*)
            ret=0
            ;;
    esac
}

# Enable git repositories
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git+set-message:*' hooks git-untracked

# Enable git and mercurial repositories
# zstyle ':vcs_info:*' enable hg
# zstyle ':vcs_info:hg*:*' formats '[%m%b] '
# zstyle ':vcs_info:hg*:*' actionformats '[%b|%a%m] '
# zstyle ':vcs_info:hg*:*' branchformat '%b'
# zstyle ':vcs_info:hg*:*' get-bookmarks true
# zstyle ':vcs_info:hg*:*' get-revision true
# zstyle ':vcs_info:hg*:*' get-mq false
# zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks
# zstyle ':vcs_info:hg*+set-message:*' hooks hg-message

add-zsh-hook precmd vcs_info

function set_prompt_with_elapsed_time() {
  ELAPSED="${1:-0.00s}"

  ITALIC_ON=$'\e[3m'
  ITALIC_OFF=$'\e[23m'

  local TOKEN="%F{blue}>"
  local USER="%F{cyan}%n"
  local AT="%F{white}@"
  local HOST="%F{green}%m"
  local IN="%F{white}in"
  local WORKDIR="%{$terminfo[bold]%}%F{yellow}%~%{$reset_color%}"
  local GITINFO="\${vcs_info_msg_0_:-}%{$reset_color%}"
  local EC="(EC:%F{red}%?%{$reset_color%})"
  local ELAPSED="%F{cyan}%{$ITALIC_ON%}${ELAPSED}%{$ITALIC_OFF%}"
  local ENDTOKEN="%{$terminfo[bold]%}%F{red}$ %{$reset_color%}%f"

  # > user @ host in PWD [git_info] (EC:$?) cmd_time $
  PROMPT="$TOKEN $USER $AT $HOST $IN $WORKDIR $GITINFO $EC $ELAPSED $ENDTOKEN"

  # Disable vcs_info if it spends a lot of time with big repos
  # > user @ host in PWD (EC:$?) cmd_time $
  # PROMPT="$TOKEN $USER $AT $HOST $IN $WORKDIR $EC $ELAPSED $ENDTOKEN"
}

set_prompt_with_elapsed_time
